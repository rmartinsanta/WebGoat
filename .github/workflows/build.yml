name: SonarQube

on:
    push:
        branches:
            - main
    pull_request:
        types: [opened, synchronize, reopened]

jobs:
    build:
        name: Build and analyze
        runs-on: ubuntu-latest

        steps:
            # Paso 1: Comprobar el c칩digo
            - uses: actions/checkout@v4
              with:
                  fetch-depth: 0  # Desactivar clones superficiales para mejorar la relevancia del an치lisis

            # Paso 2: Configurar JDK 17
            - name: Set up JDK 17
              uses: actions/setup-java@v4
              with:
                  java-version: 17
                  distribution: 'zulu' # Alternativa para usar una distribuci칩n de OpenJDK

            # Paso 3: Cache para SonarQube
            - name: Cache SonarQube packages
              uses: actions/cache@v4
              with:
                  path: ~/.sonar/cache
                  key: ${{ runner.os }}-sonar
                  restore-keys: ${{ runner.os }}-sonar

            # Paso 4: Cache para dependencias de Maven
            - name: Cache Maven packages
              uses: actions/cache@v4
              with:
                  path: ~/.m2
                  key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
                  restore-keys: ${{ runner.os }}-m2

            # Paso 5: Build y an치lisis con SonarQube
            - name: Build and analyze
              env:
                  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}  # Token de SonarQube almacenado en los secretos
              run: |
                  mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar \
                    -Dsonar.projectKey=Cesarmb3_WebGoat \
                    -Dsonar.pullrequest.key=${{ github.event.pull_request.number }} \
                    -Dsonar.pullrequest.branch=${{ github.head_ref }} \
                    -Dsonar.pullrequest.base=${{ github.base_ref }}
